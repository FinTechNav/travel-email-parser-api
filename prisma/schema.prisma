// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  apiKey    String   @unique @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  itineraries     Itinerary[]
  usage           ApiUsage[]
  processedEmails ProcessedEmail[]
  
  @@map("users")
}

model Itinerary {
  id          String   @id @default(cuid())
  userId      String
  tripName    String?
  startDate   DateTime?
  endDate     DateTime?
  destination String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  segments Segment[]
  
  @@map("itineraries")
  @@index([userId])
  @@index([startDate])
}

model Segment {
  id                 String    @id @default(cuid())
  itineraryId        String
  type               String    // flight, hotel, car_rental, train, cruise, restaurant, event
  confirmationNumber String?
  startDateTime      DateTime?
  endDateTime        DateTime?
  origin             String?
  destination        String?
  details            Json?     // Flexible storage for type-specific data
  rawEmail           String?   // Store original email content for debugging
  parsedAt           DateTime  @default(now())
  
  // Relationships
  itinerary Itinerary @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  
  @@map("segments")
  @@index([itineraryId])
  @@index([type])
  @@index([startDateTime])
  @@index([confirmationNumber])
}

model ApiUsage {
  id            String   @id @default(cuid())
  userId        String
  endpoint      String   // parse_email, parse_batch, etc.
  requestsCount Int      @default(1)
  date          DateTime @default(now())
  
  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, endpoint, date])
  @@map("api_usage")
  @@index([userId])
  @@index([date])
}

// NEW: Email processing tracking to prevent duplicates
model ProcessedEmail {
  id            String   @id @default(cuid())
  emailHash     String   @unique  // SHA256 hash of email content for deduplication
  messageId     String?  // Email message ID (can be null for some emails)
  subject       String?  // Email subject line (truncated to 255 chars)
  fromAddress   String?  // Sender email address
  userId        String   // User who processed this email
  processedAt   DateTime @default(now())
  updatedAt     DateTime @updatedAt
  success       Boolean  @default(false) // Whether processing was successful
  source        String   @default("email_polling") // email_polling, api, manual, etc.
  
  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("processed_emails")
  @@index([messageId])
  @@index([userId])
  @@index([processedAt])
  @@index([success])
  @@index([emailHash, messageId]) // Composite index for fast duplicate checking
  @@index([userId, processedAt])   // For user-specific queries
}