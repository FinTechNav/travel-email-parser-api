// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  apiKey    String   @unique @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  itineraries     Itinerary[]
  usage           ApiUsage[]
  processedEmails ProcessedEmail[]
  
  @@map("users")
}

model Itinerary {
  id          String   @id @default(cuid())
  userId      String
  tripName    String?
  startDate   DateTime?
  endDate     DateTime?
  destination String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  segments Segment[]
  
  @@map("itineraries")
  @@index([userId])
  @@index([startDate])
}

model Segment {
  id                 String    @id @default(cuid())
  itineraryId        String
  type               String    // flight, hotel, car_rental, train, cruise, restaurant, event
  confirmationNumber String?
  startDateTime      DateTime?
  endDateTime        DateTime?
  origin             String?
  destination        String?
  details            Json?     // Flexible storage for type-specific data
  rawEmail           String?   // Store original email content for debugging
  parsedAt           DateTime  @default(now())
  
  // Relationships
  itinerary Itinerary @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  
  @@map("segments")
  @@index([itineraryId])
  @@index([type])
  @@index([startDateTime])
  @@index([confirmationNumber])
}

model ApiUsage {
  id            String   @id @default(cuid())
  userId        String
  endpoint      String   // parse_email, parse_batch, etc.
  requestsCount Int      @default(1)
  date          DateTime @default(now())
  
  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, endpoint, date])
  @@map("api_usage")
  @@index([userId])
  @@index([date])
}

model ProcessedEmail {
  id            String   @id @default(cuid())
  emailHash     String   @unique  // SHA256 hash of email content for deduplication
  messageId     String?  // Email message ID (can be null for some emails)
  subject       String?  // Email subject line (truncated to 255 chars)
  fromAddress   String?  // Sender email address
  userId        String   // User who processed this email
  processedAt   DateTime @default(now())
  updatedAt     DateTime @updatedAt
  success       Boolean  @default(false) // Whether processing was successful
  source        String   @default("email_polling") // email_polling, api, manual, etc.
  
  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("processed_emails")
  @@index([messageId])
  @@index([userId])
  @@index([processedAt])
  @@index([success])
  @@index([emailHash, messageId]) // Composite index for fast duplicate checking
  @@index([userId, processedAt])   // For user-specific queries
}

// AI Prompt Templates
model PromptTemplate {
  id            String   @id @default(cuid())
  name          String   @unique
  category      String   // 'classification', 'parsing', 'validation'
  type          String   // 'flight', 'hotel', 'car_rental', 'base'
  version       Int      @default(1)
  prompt        String   @db.Text
  variables     Json?    // Variables that can be replaced in prompt
  isActive      Boolean  @default(true)
  metadata      Json?    // Additional config like temperature, max_tokens
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String?
  
  // For A/B testing
  testGroup     String?  // 'A', 'B', 'control'
  successRate   Float?
  usageCount    Int      @default(0)
  
  // Relations
  usage         PromptUsage[]
  
  @@map("prompt_templates")
}

// AI Model Configurations
model AIConfiguration {
  id            String   @id @default(cuid())
  name          String   @unique
  model         String   // 'gpt-4o-mini', 'gpt-3.5-turbo'
  temperature   Float    @default(0.1)
  maxTokens     Int      @default(2000)
  isActive      Boolean  @default(true)
  costPerToken  Float?   // For cost tracking
  metadata      Json?    // Additional OpenAI parameters
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("ai_configurations")
}

// Track prompt usage and performance
model PromptUsage {
  id            String   @id @default(cuid())
  templateId    String
  template      PromptTemplate @relation(fields: [templateId], references: [id])
  userId        String?
  emailType     String
  success       Boolean
  errorMessage  String?
  responseTime  Int      // milliseconds
  tokenUsage    Int?
  createdAt     DateTime @default(now())
  
  @@map("prompt_usage")
}

// Email Classification Rules
model EmailClassificationRule {
  id          String   @id @default(cuid())
  name        String   @unique
  emailType   String   // flight, hotel, car_rental, etc.
  ruleType    String   // 'keyword', 'subject_pattern', 'sender_domain', 'content_pattern'
  pattern     String   // The actual pattern/keyword to match
  priority    Int      @default(0) // Higher priority rules checked first
  isActive    Boolean  @default(true)
  caseInsensitive Boolean @default(true)
  
  // For complex matching
  metadata    Json?    // Additional matching criteria
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  
  @@map("email_classification_rules")
  @@index([emailType, ruleType])
  @@index([priority])
}

// Email Subject Patterns (for reprocessing/unmarking)
model EmailSubjectPattern {
  id          String   @id @default(cuid())
  name        String   @unique
  emailType   String   // flight, hotel, car_rental, etc.
  pattern     String   // Subject pattern to match
  variations  Json?    // Array of subject variations
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("email_subject_patterns")
  @@index([emailType])
}

// Email Processing Configuration
model EmailProcessingConfig {
  id          String   @id @default(cuid())
  category    String   // 'validation', 'detection', 'parsing'
  key         String   // Specific config key
  value       Json     // Configuration value (can be object, array, string, number)
  description String?
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([category, key])
  @@map("email_processing_config")
  @@index([category])
}

// Email Sender Rules (for trusted sources, spam filtering, etc.)
model EmailSenderRule {
  id          String   @id @default(cuid())
  name        String   @unique
  senderPattern String // Email pattern like '@delta.com', 'noreply@booking.com'
  emailType   String?  // Associated email type, if any
  trustLevel  String   @default("normal") // 'trusted', 'normal', 'suspicious', 'blocked'
  isActive    Boolean  @default(true)
  
  // Processing preferences for this sender
  metadata    Json?    // Custom processing rules for this sender
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("email_sender_rules")
  @@index([trustLevel])
}

model SegmentTypeConfig {
  id              String   @id @default(cuid())
  name            String   @unique
  displayName     String   @map("display_name")
  description     String?
  isActive        Boolean  @default(true) @map("is_active")
  defaultTimezone String   @default("America/New_York") @map("default_timezone")
  displayConfig   Json?    @map("display_config")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  @@map("segment_type_configs")
}

model ClassificationRule {
  id              Int      @id @default(autoincrement())
  name            String
  segmentTypeName String   @map("segment_type_name")
  pattern         String
  type            String   @default("keyword")
  priority        Int      @default(10)
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  @@map("classification_rules")
}

model TimezoneRule {
  id              Int      @id @default(autoincrement())
  segmentTypeName String   @map("segment_type_name")
  locationPattern String   @map("location_pattern")
  timezone        String
  priority        Int      @default(10)
  createdAt       DateTime @default(now()) @map("created_at")
  
  @@map("timezone_rules")
}

model DisplayRule {
  id                Int      @id @default(autoincrement())
  segmentTypeName   String   @map("segment_type_name")
  primaryTimeField  String   @default("departure") @map("primary_time_field")
  timezoneSource    String   @default("origin") @map("timezone_source")
  routeFormat       String   @default("{origin} â†’ {destination}") @map("route_format")
  customFields      Json?    @map("custom_fields")
  createdAt         DateTime @default(now()) @map("created_at")
  
  @@map("display_rules")
}