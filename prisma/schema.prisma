generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  name            String?
  password        String
  apiKey          String           @unique @default(cuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  usage           ApiUsage[]
  itineraries     Itinerary[]
  processedEmails ProcessedEmail[]

  @@map("users")
}

model Itinerary {
  id          String    @id @default(cuid())
  userId      String
  tripName    String?
  startDate   DateTime?
  endDate     DateTime?
  destination String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  segments    Segment[]

  @@index([userId])
  @@index([startDate])
  @@map("itineraries")
}

model Segment {
  id                 String    @id @default(cuid())
  itineraryId        String
  type               String
  confirmationNumber String?
  startDateTime      DateTime?
  endDateTime        DateTime?
  origin             String?
  destination        String?
  details            Json?
  rawEmail           String?
  parsedAt           DateTime  @default(now())
  itinerary          Itinerary @relation(fields: [itineraryId], references: [id], onDelete: Cascade)

  @@index([itineraryId])
  @@index([type])
  @@index([startDateTime])
  @@index([confirmationNumber])
  @@map("segments")
}

model ApiUsage {
  id            String   @id @default(cuid())
  userId        String
  endpoint      String
  requestsCount Int      @default(1)
  date          DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, endpoint, date])
  @@index([userId])
  @@index([date])
  @@map("api_usage")
}

model ProcessedEmail {
  id          String   @id @default(cuid())
  emailHash   String   @unique
  messageId   String?
  subject     String?
  fromAddress String?
  userId      String
  processedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt
  success     Boolean  @default(false)
  source      String   @default("email_polling")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@index([userId])
  @@index([processedAt])
  @@index([success])
  @@index([emailHash, messageId])
  @@index([userId, processedAt])
  @@map("processed_emails")
}

model PromptTemplate {
  id                String        @id @default(cuid())
  name              String        @unique
  category          String
  type              String
  version           Int           @default(1)
  prompt            String
  variables         Json?
  isActive          Boolean       @default(true)
  metadata          Json?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  createdBy         String?
  testGroup         String?
  successRate       Float?
  usageCount        Int           @default(0)
  segment_type_name String?       @db.VarChar(50)
  usage             PromptUsage[]

  @@map("prompt_templates")
}

model AIConfiguration {
  id           String   @id @default(cuid())
  name         String   @unique
  model        String
  temperature  Float    @default(0.1)
  maxTokens    Int      @default(2000)
  isActive     Boolean  @default(true)
  costPerToken Float?
  metadata     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("ai_configurations")
}

model PromptUsage {
  id           String         @id @default(cuid())
  templateId   String
  userId       String?
  emailType    String
  success      Boolean
  errorMessage String?
  responseTime Int
  tokenUsage   Int?
  createdAt    DateTime       @default(now())
  template     PromptTemplate @relation(fields: [templateId], references: [id])

  @@map("prompt_usage")
}

model EmailClassificationRule {
  id              String   @id @default(cuid())
  name            String   @unique
  emailType       String
  ruleType        String
  pattern         String
  priority        Int      @default(0)
  isActive        Boolean  @default(true)
  caseInsensitive Boolean  @default(true)
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String?

  @@index([emailType, ruleType])
  @@index([priority])
  @@map("email_classification_rules")
}

model EmailSubjectPattern {
  id         String   @id @default(cuid())
  name       String   @unique
  emailType  String
  pattern    String
  variations Json?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([emailType])
  @@map("email_subject_patterns")
}

model EmailProcessingConfig {
  id          String   @id @default(cuid())
  category    String
  key         String
  value       Json
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([category, key])
  @@index([category])
  @@map("email_processing_config")
}

model EmailSenderRule {
  id            String   @id @default(cuid())
  name          String   @unique
  senderPattern String
  emailType     String?
  trustLevel    String   @default("normal")
  isActive      Boolean  @default(true)
  metadata      Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([trustLevel])
  @@map("email_sender_rules")
}

model SegmentTypeConfig {
  id                   Int                  @id @default(autoincrement())
  name                 String               @unique @db.VarChar(50)
  displayName          String               @map("display_name") @db.VarChar(100)
  description          String?
  isActive             Boolean?             @default(true) @map("is_active")
  defaultTimezone      String?              @default("America/New_York") @map("default_timezone") @db.VarChar(50)
  displayConfig        Json?                @default("{}") @map("display_config")
  createdAt            DateTime?            @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt            DateTime?            @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  classification_rules ClassificationRule[]
  display_rules        DisplayRule[]
  timezone_rules       TimezoneRule[]

  @@map("segment_type_configs")
}

model ClassificationRule {
  id                   Int                @id @default(autoincrement())
  name                 String             @db.VarChar(100)
  segmentTypeName      String?            @map("segment_type_name") @db.VarChar(50)
  pattern              String
  type                 String?            @default("keyword") @db.VarChar(20)
  priority             Int?               @default(10)
  isActive             Boolean?           @default(true) @map("is_active")
  createdAt            DateTime?          @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt            DateTime?          @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  segment_type_configs SegmentTypeConfig? @relation(fields: [segmentTypeName], references: [name], onDelete: Cascade, onUpdate: NoAction)

  @@index([priority(sort: Desc)], map: "idx_classification_rules_priority")
  @@index([segmentTypeName], map: "idx_classification_rules_segment_type")
  @@map("classification_rules")
}

model TimezoneRule {
  id                   Int                @id @default(autoincrement())
  segmentTypeName      String?            @map("segment_type_name") @db.VarChar(50)
  locationPattern      String             @map("location_pattern") @db.VarChar(100)
  timezone             String             @db.VarChar(50)
  priority             Int?               @default(10)
  createdAt            DateTime?          @default(now()) @map("created_at") @db.Timestamp(6)
  segment_type_configs SegmentTypeConfig? @relation(fields: [segmentTypeName], references: [name], onDelete: Cascade, onUpdate: NoAction)

  @@index([segmentTypeName], map: "idx_timezone_rules_segment_type")
  @@map("timezone_rules")
}

model DisplayRule {
  id                   Int                @id @default(autoincrement())
  segmentTypeName      String?            @map("segment_type_name") @db.VarChar(50)
  primaryTimeField     String?            @default("departure") @map("primary_time_field") @db.VarChar(30)
  timezoneSource       String?            @default("origin") @map("timezone_source") @db.VarChar(20)
  routeFormat          String?            @default("{origin} â†’ {destination}") @map("route_format") @db.VarChar(100)
  customFields         Json?              @default("{}") @map("custom_fields")
  createdAt            DateTime?          @default(now()) @map("created_at") @db.Timestamp(6)
  segment_type_configs SegmentTypeConfig? @relation(fields: [segmentTypeName], references: [name], onDelete: Cascade, onUpdate: NoAction)

  @@map("display_rules")
}
